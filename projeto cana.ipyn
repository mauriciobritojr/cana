{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chave:  3288 Valor:  10.0\n",
      "Chave:  661120 Valor:  755.9\n"
     ]
    }
   ],
   "source": [
    "# # Função que retorna a chave do menor valor em um dicionário (no caso, Contratos)\n",
    "# Def chave_menor_valor(contratos):\n",
    "#     menor_valor=min(contratos, key=contratos.get)\n",
    "# #     print(\"Chave Menor Valor \", menor_valor)\n",
    "# # FIM Função\n",
    "\n",
    "# Tratamento dos arquivo de entrada.txt\n",
    "\n",
    "arquivo = open(\"entrada.txt\",\"r\")\n",
    "campos=[]\n",
    "contratos={}\n",
    "#Repete para cada linha do arquivo.\n",
    "linha=arquivo.readlines()\n",
    "for ind in range(len(linha)):\n",
    "  # Vamos dividir a linha em uma lista chamada \"fields\" usando o \" \" como separador:\n",
    "  campos = linha[ind].split()\n",
    "\n",
    "  #Extrai os dados\n",
    "  if ind == 0:\n",
    "    #extrai o \"cabeçalho\"\n",
    "    n = int(campos[0])\n",
    "    m = int(campos[1])\n",
    "    taxa = float(campos[2])\n",
    "    #Mostra o cabeçalho\n",
    "#     print(\"n m taxa: \", n, m, taxa)\n",
    "  else:\n",
    "    # cria a chave da lista contratos e atribui valor a cada chave\n",
    "    chave_contrato=str(campos[0]+campos[1]+campos[2])\n",
    "    contratos[chave_contrato]=float(campos[3])\n",
    "    \n",
    "# Chama função que enconta a chave do menor valor de contrato\n",
    "# print(contratos)\n",
    "menor_valor=min(contratos, key=contratos.get, default=0)\n",
    "maior_valor=max(contratos, key=contratos.get, default=0)\n",
    "print(\"Chave: \", menor_valor, \"Valor: \", contratos[menor_valor])\n",
    "print(\"Chave: \", maior_valor, \"Valor: \", contratos[maior_valor])\n",
    "#fecha o arquivo  \n",
    "arquivo.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "arquivo = open(\"entrada_min.txt\",\"r\")\n",
    "linha=arquivo.readline()\n",
    "print(linha)\n",
    "campo=[]\n",
    "campo=linha.split()\n",
    "print(campo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encontra chave do menor valor em um dicionário\n",
    "# d={\"a\": 3, \"b\": 2, \"c\": 5}\n",
    "d={}\n",
    "print(min({1: \"one\", 2: \"two\", 3: \"three\"}))\n",
    "minimo = min(d, key=d.get, default=0)\n",
    "print(minimo)\n",
    "maximo = max(d, key=d.get, default=0)\n",
    "print(maximo)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
